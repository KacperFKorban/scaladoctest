[0m[[0m[0mdebug[0m] [0m[0m[zinc] IncrementalCompile -----------[0m
[0m[[0m[0mdebug[0m] [0m[0mIncrementalCompile.incrementalCompile[0m
[0m[[0m[0mdebug[0m] [0m[0mprevious = Stamps for: 38 products, 7 sources, 2 libraries[0m
[0m[[0m[0mdebug[0m] [0m[0mcurrent source = Set(${BASE}/src/main/scala/xd/Tree.scala, ${BASE}/src/main/scala/xd/XD.scala, ${BASE}/src/main/scala/xd/Color.scala, ${BASE}/src/main/scala/Main.scala, ${BASE}/src/main/scala/xd/Ann.scala, ${BASE}/src/main/scala/ParamAnnotations.scala, ${BASE}/src/main/scala/DefaultValues.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m> initialChanges = InitialChanges(Changes(added = Set(), removed = Set(), changed = Set(${BASE}/src/main/scala/xd/XD.scala), unmodified = ...),Set(),Set(),API Changes: Set())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	removed: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(${BASE}/src/main/scala/xd/XD.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(xd.XD, xd.XD$.MyClass)[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(xd.XD, xd.XD$.MyClass)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(${BASE}/src/main/scala/xd/XD.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: xd.XD, xd.XD$.MyClass[0m
[0m[[0m[0mdebug[0m] [0m[0mcompilation cycle 1[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to /home/kkorban/xd/target/scala-3.0.0-RC1/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mReturning already retrieved and compiled bridge: /home/kkorban/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-sbt-bridge/3.0.0-RC1/scala3-sbt-bridge-3.0.0-RC1.jar.[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 74a94100 for Scala Compiler version (unknown)[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/kkorban/xd/target/scala-3.0.0-RC1/classes:/home/kkorban/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3.0.0-RC1/3.0.0-RC1/scala3-library_3.0.0-RC1-3.0.0-RC1.jar:/home/kkorban/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.4/scala-library-2.13.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 0.193798386 s[0m
[0m[[0m[0mdebug[0m] [0m[0mdone compiling[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from xd.XD...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: xd.XD[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(xd.XD)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(xd.XD,ModifiedNames(changes = UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(i,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(MirroredLabel,[Default]), UsedName(wait,[Default]), UsedName(toString,[Default]), UsedName(_2,[Default]), UsedName(fromProduct,[Default]), UsedName($isInstanceOf$,[Default]), UsedName(apply,[Default]), UsedName(copy$default$1,[Default]), UsedName(XD,[Default]), UsedName(MyClass,[Default]), UsedName(productElement,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(eq,[Default]), UsedName(_1,[Default]), UsedName(productElementName,[Default]), UsedName(==,[Default]), UsedName($asInstanceOf$,[Default]), UsedName(<init>,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(s,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The xd.XD has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(i,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(MirroredLabel,[Default]), UsedName(wait,[Default]), UsedName(toString,[Default]), UsedName(_2,[Default]), UsedName(fromProduct,[Default]), UsedName($isInstanceOf$,[Default]), UsedName(apply,[Default]), UsedName(copy$default$1,[Default]), UsedName(XD,[Default]), UsedName(MyClass,[Default]), UsedName(productElement,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(eq,[Default]), UsedName(_1,[Default]), UsedName(productElementName,[Default]), UsedName(==,[Default]), UsedName($asInstanceOf$,[Default]), UsedName(<init>,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(s,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(xd.XD)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from xd.XD$.MyClass...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: xd.XD$.MyClass[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(xd.XD$.MyClass)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(xd.XD$.MyClass,ModifiedNames(changes = UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(i,[Default]), UsedName(unapply,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(MirroredLabel,[Default]), UsedName(wait,[Default]), UsedName(toString,[Default]), UsedName(fromProduct,[Default]), UsedName($isInstanceOf$,[Default]), UsedName(apply,[Default]), UsedName(copy$default$1,[Default]), UsedName(MyClass,[Default]), UsedName(productElement,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(eq,[Default]), UsedName(_1,[Default]), UsedName(productElementName,[Default]), UsedName(==,[Default]), UsedName($asInstanceOf$,[Default]), UsedName(<init>,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The xd.XD$.MyClass has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(!=,[Default]), UsedName(copy,[Default]), UsedName(i,[Default]), UsedName(unapply,[Default]), UsedName(hashCode,[Default]), UsedName(synchronized,[Default]), UsedName(MirroredLabel,[Default]), UsedName(wait,[Default]), UsedName(toString,[Default]), UsedName(fromProduct,[Default]), UsedName($isInstanceOf$,[Default]), UsedName(apply,[Default]), UsedName(copy$default$1,[Default]), UsedName(MyClass,[Default]), UsedName(productElement,[Default]), UsedName(productArity,[Default]), UsedName(equals,[Default]), UsedName(MirroredMonoType,[Default]), UsedName(productPrefix,[Default]), UsedName(canEqual,[Default]), UsedName(eq,[Default]), UsedName(_1,[Default]), UsedName(productElementName,[Default]), UsedName(==,[Default]), UsedName($asInstanceOf$,[Default]), UsedName(<init>,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(notify,[Default]), UsedName(MirroredElemLabels,[Default]), UsedName(ne,[Default]), UsedName(##,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(xd.XD$.MyClass)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0mFinal step, transitive dependencies:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
